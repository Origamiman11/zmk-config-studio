//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define ZMK_POINTING_DEFAULT_MOVE_VAL 2500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "hold-preferred";
    tapping-term-ms = <170>;
};

&mmv {
    x-input-code = <INPUT_REL_X>;
    y-input-code = <INPUT_REL_Y>;
    time-to-max-speed-ms = <750>;
    acceleration-exponent = <0.5>;
};

&msc {
    x-input-code = <INPUT_REL_HWHEEL>;
    y-input-code = <INPUT_REL_WHEEL>;
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <0>;
};

&sk {
    quick-release;
    release-after-ms = <500>;
};

/ {
    combos {
        compatible = "zmk,combos";

        mouse_on {
            bindings = <&to 3>;
            key-positions = <32 31>;
            layers = <0>;
            require-prior-idle-ms = <400>;
        };

        numpad_on {
            bindings = <&to 2>;
            key-positions = <33 30>;
            layers = <0>;
            require-prior-idle-ms = <400>;
        };

        game_on {
            bindings = <&to 1>;
            key-positions = <33 31>;
            layers = <0>;
            require-prior-idle-ms = <400>;
        };

        lt_off {
            bindings = <&to 0>;
            key-positions = <32 31>;
            layers = <3 1 2>;
            require-prior-idle-ms = <400>;
        };

        word_delete {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <30 32>;
            layers = <0 2>;
        };

        cmd+shift {
            bindings = <&kp LG(LEFT_SHIFT)>;
            key-positions = <30 31>;
            layers = <0>;
        };

        Bluetooth_config {
            bindings = <&sl 7>;
            key-positions = <34 36>;
            require-prior-idle-ms = <200>;
        };

        mute {
            bindings = <&kp C_MUTE>;
            key-positions = <27 26>;
            layers = <6>;
        };
    };

    behaviors {
        Comma_exclamatino: Comma_exclamatino {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_EXCLAMATINO";
            bindings = <&kp COMMA>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        Period_Question: Period_Question {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_QUESTION";
            bindings = <&kp PERIOD>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        up_vol_brightness: up_vol_brightness {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_VOL_BRIGHTNESS";
            bindings = <&kp C_VOLUME_UP>, <&kp C_BRIGHTNESS_INC>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        down_vol_bright: down_vol_bright {
            compatible = "zmk,behavior-mod-morph";
            label = "DOWN_VOL_BRIGHT";
            bindings = <&kp C_VOL_DN>, <&kp C_BRIGHTNESS_DEC>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        pgup_window_swap: pgup_window_swap {
            compatible = "zmk,behavior-mod-morph";
            label = "PGUP_WINDOW_SWAP";
            bindings = <&kp PG_UP>, <&kp PERIOD>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        mt_idle: mt_idle {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_IDLE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            require-prior-idle-ms = <200>;
            tapping-term-ms = <170>;
            quick-tap-ms = <100>;
        };

        minus_backslash: minus_backslash {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_BACKSLASH";
            bindings = <&kp MINUS>, <&kp SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mt_idle_extra: mt_idle_extra {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_IDLE_EXTRA";
            bindings = <&kp>, <&minus_backslash>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        BASE {
            bindings = <
       &kp Q  &kp W  &kp F            &kp P           &kp B        &kp J        &kp L               &kp U               &kp Y                      &kp SEMI
       &kp A  &kp R  &kp S            &kp T           &kp G        &kp M        &kp N               &kp E               &kp I                      &kp O
&kp Z  &kp X  &kp C  &kp D            &kp V           &kp K        &kp H        &Comma_exclamatino  &Period_Question    &mt_idle_extra LEFT_ALT 0  &mt LS(TAB) TAB  &mt LEFT_GUI ESCAPE
                     &lt 5 BACKSPACE  &sk LEFT_SHIFT  &kp SPACE    &lt 6 ENTER  &lt 3 TAB           &mt_idle LCTRL SQT
            >;
        };

        GAME {
            bindings = <
           &kp T      &kp Q  &kp W   &kp E      &kp R        &kp Y   &kp U      &kp I    &kp O     &kp P
           &kp LSHFT  &kp A  &kp S   &kp D      &kp F        &kp H   &kp J      &kp K    &kp L     &kp SEMI
&kp LCTRL  &kp Z      &kp X  &kp C   &kp V      &kp N        &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans    &trans
                             &trans  &kp SPACE  &kp SPACE    &trans  &trans     &to 0
            >;
        };

        NUMPAD {
            bindings = <
           &kp ASTERISK  &kp N7  &kp N8         &kp N9     &kp PLUS     &none   &kp F1   &kp F2   &kp F3   &kp F4
           &kp ENTER     &kp N4  &kp N5         &kp N6     &kp EQUAL    &none   &kp F5   &kp F6   &kp F7   &kp F8
&kp SLASH  &kp NUMBER_1  &kp N2  &kp N3         &kp MINUS  &none        &kp F9  &kp F10  &kp F11  &kp F12  &mt LS(TAB) TAB  &kp PERIOD
                                 &kp BACKSPACE  &kp N0     &none        &to 0   &none    &to 0
            >;
        };

        MOUSE {
            bindings = <
              &none          &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &mmv MOVE_UP               &mkp MB3         &mkp RCLK    &none                              &none             &none       &none     &none
              &mkp MB4       &mmv MOVE_LEFT                     &mmv MOVE_DOWN             &mmv MOVE_RIGHT  &mkp MB5     &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &mkp MB1          &mkp MB2    &mkp MB3  &mmv MOVE_X(-400)
&kp LC(LEFT)  &kp LC(RIGHT)  &mt LC(LA(LG(Q))) LS(LC(TAB))      &mt LA(LC(LG(E))) LC(TAB)  &none            &none        &kp C_PREVIOUS                     &kp C_PLAY_PAUSE  &kp C_NEXT  &none     &mt LEFT_GUI ESCAPE  &none
                                                                &mo 4                      &mkp LCLK        &none        &none                              &none             &to 0
            >;
        };

        SCROLLING {
            bindings = <
        &trans  &trans          &msc SCRL_UP    &trans           &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans          &trans          &trans           &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                &trans          &trans           &trans    &trans  &trans  &trans
            >;
        };

        NUMBER {
            bindings = <
              &kp LS(N1)     &kp LS(N2)                     &kp LS(N3)                 &kp LS(N4)              &kp LS(N5)         &kp LS(N6)    &kp LS(N7)    &kp LS(N8)    &kp LS(N9)  &kp LS(N0)
              &kp N1         &kp N2                         &kp N3                     &kp N4                  &kp N5             &kp N6        &kp N7        &kp N8        &kp N9      &kp N0
&kp LC(LEFT)  &kp LC(RIGHT)  &mt LC(LA(LG(Q))) LS(LC(TAB))  &mt LC(LA(LG(E))) LC(TAB)  &kp LA(LC(LG(PERIOD)))  &kp SLASH          &kp MINUS     &kp PLUS      &kp ASTERISK  &kp CARET   &mt BACKSPACE UNDERSCORE  &kp LG(LA(C))
                                                            &trans                     &none                   &mt LCTRL SPACE    &kp LEFT_ALT  &kp LEFT_GUI  &kp EQUAL
            >;
        };

        BRACKET {
            bindings = <
           &kp TILDE             &kp PIPE          &kp LEFT_BRACE        &kp RIGHT_BRACE        &none            &kp PRINTSCREEN    &none               &kp UP_ARROW    &none      &none
           &kp LESS_THAN         &kp GREATER_THAN  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none            &pgup_window_swap  &kp LEFT            &kp DOWN        &kp RIGHT  &kp LC(LA(LEFT_GUI))
&kp SLASH  &kp NON_US_BACKSLASH  &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp LCTRL              &kp PAGE_DOWN    &down_vol_bright   &up_vol_brightness  &kp LEFT_SHIFT  &none      &mt LCTRL GRAVE       &kp LEFT_GUI
                                                   &kp LEFT_ALT          &kp LEFT_SHIFT         &none            &trans             &none               &kp DELETE
            >;
        };

        BLUETOOTH {
            bindings = <
       &none  &none  &none  &none  &none    &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4
       &none  &none  &none  &none  &none    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4
&none  &none  &none  &none  &none  &none    &out OUT_BLE   &out OUT_USB   &none          &none          &none          &none
                     &none  &none  &none    &none          &none          &bt BT_CLR
            >;
        };
    };
};
